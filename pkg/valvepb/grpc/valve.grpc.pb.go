// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.6.1
// source: valve.grpc.proto

package grpc

import (
	context "context"
	shared "github.com/FrancescoIlario/grower/pkg/valvepb/shared"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type GetStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetStatusRequest) Reset() {
	*x = GetStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_valve_grpc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatusRequest) ProtoMessage() {}

func (x *GetStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_valve_grpc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatusRequest.ProtoReflect.Descriptor instead.
func (*GetStatusRequest) Descriptor() ([]byte, []int) {
	return file_valve_grpc_proto_rawDescGZIP(), []int{0}
}

type GetStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status shared.ValveStatus `protobuf:"varint,1,opt,name=Status,proto3,enum=shared.ValveStatus" json:"Status,omitempty"`
}

func (x *GetStatusResponse) Reset() {
	*x = GetStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_valve_grpc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatusResponse) ProtoMessage() {}

func (x *GetStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_valve_grpc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatusResponse.ProtoReflect.Descriptor instead.
func (*GetStatusResponse) Descriptor() ([]byte, []int) {
	return file_valve_grpc_proto_rawDescGZIP(), []int{1}
}

func (x *GetStatusResponse) GetStatus() shared.ValveStatus {
	if x != nil {
		return x.Status
	}
	return shared.ValveStatus_VALVE_UNSPECIFIED
}

type OpenValveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *OpenValveRequest) Reset() {
	*x = OpenValveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_valve_grpc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenValveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenValveRequest) ProtoMessage() {}

func (x *OpenValveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_valve_grpc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenValveRequest.ProtoReflect.Descriptor instead.
func (*OpenValveRequest) Descriptor() ([]byte, []int) {
	return file_valve_grpc_proto_rawDescGZIP(), []int{2}
}

type OpenValveResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *OpenValveResponse) Reset() {
	*x = OpenValveResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_valve_grpc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenValveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenValveResponse) ProtoMessage() {}

func (x *OpenValveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_valve_grpc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenValveResponse.ProtoReflect.Descriptor instead.
func (*OpenValveResponse) Descriptor() ([]byte, []int) {
	return file_valve_grpc_proto_rawDescGZIP(), []int{3}
}

type CloseValveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CloseValveRequest) Reset() {
	*x = CloseValveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_valve_grpc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloseValveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseValveRequest) ProtoMessage() {}

func (x *CloseValveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_valve_grpc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseValveRequest.ProtoReflect.Descriptor instead.
func (*CloseValveRequest) Descriptor() ([]byte, []int) {
	return file_valve_grpc_proto_rawDescGZIP(), []int{4}
}

type CloseValveResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CloseValveResponse) Reset() {
	*x = CloseValveResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_valve_grpc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloseValveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseValveResponse) ProtoMessage() {}

func (x *CloseValveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_valve_grpc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseValveResponse.ProtoReflect.Descriptor instead.
func (*CloseValveResponse) Descriptor() ([]byte, []int) {
	return file_valve_grpc_proto_rawDescGZIP(), []int{5}
}

var File_valve_grpc_proto protoreflect.FileDescriptor

var file_valve_grpc_proto_rawDesc = []byte{
	0x0a, 0x10, 0x76, 0x61, 0x6c, 0x76, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x04, 0x67, 0x72, 0x70, 0x63, 0x1a, 0x12, 0x76, 0x61, 0x6c, 0x76, 0x65, 0x2e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x12, 0x0a, 0x10,
	0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x40, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x56,
	0x61, 0x6c, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x12, 0x0a, 0x10, 0x4f, 0x70, 0x65, 0x6e, 0x56, 0x61, 0x6c, 0x76, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x13, 0x0a, 0x11, 0x4f, 0x70, 0x65, 0x6e, 0x56, 0x61,
	0x6c, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x13, 0x0a, 0x11, 0x43,
	0x6c, 0x6f, 0x73, 0x65, 0x56, 0x61, 0x6c, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x14, 0x0a, 0x12, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x56, 0x61, 0x6c, 0x76, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xd1, 0x01, 0x0a, 0x0c, 0x56, 0x61, 0x6c, 0x76, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3e, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x09, 0x4f, 0x70, 0x65, 0x6e, 0x56,
	0x61, 0x6c, 0x76, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4f, 0x70, 0x65, 0x6e,
	0x56, 0x61, 0x6c, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x56, 0x61, 0x6c, 0x76, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x0a, 0x43, 0x6c, 0x6f, 0x73, 0x65,
	0x56, 0x61, 0x6c, 0x76, 0x65, 0x12, 0x17, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x56, 0x61, 0x6c, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x56, 0x61, 0x6c, 0x76, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x36, 0x48, 0x03, 0x5a, 0x32,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x46, 0x72, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x63, 0x6f, 0x49, 0x6c, 0x61, 0x72, 0x69, 0x6f, 0x2f, 0x67, 0x72, 0x6f, 0x77, 0x65,
	0x72, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x76, 0x61, 0x6c, 0x76, 0x65, 0x70, 0x62, 0x2f, 0x67, 0x72,
	0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_valve_grpc_proto_rawDescOnce sync.Once
	file_valve_grpc_proto_rawDescData = file_valve_grpc_proto_rawDesc
)

func file_valve_grpc_proto_rawDescGZIP() []byte {
	file_valve_grpc_proto_rawDescOnce.Do(func() {
		file_valve_grpc_proto_rawDescData = protoimpl.X.CompressGZIP(file_valve_grpc_proto_rawDescData)
	})
	return file_valve_grpc_proto_rawDescData
}

var file_valve_grpc_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_valve_grpc_proto_goTypes = []interface{}{
	(*GetStatusRequest)(nil),   // 0: grpc.GetStatusRequest
	(*GetStatusResponse)(nil),  // 1: grpc.GetStatusResponse
	(*OpenValveRequest)(nil),   // 2: grpc.OpenValveRequest
	(*OpenValveResponse)(nil),  // 3: grpc.OpenValveResponse
	(*CloseValveRequest)(nil),  // 4: grpc.CloseValveRequest
	(*CloseValveResponse)(nil), // 5: grpc.CloseValveResponse
	(shared.ValveStatus)(0),    // 6: shared.ValveStatus
}
var file_valve_grpc_proto_depIdxs = []int32{
	6, // 0: grpc.GetStatusResponse.Status:type_name -> shared.ValveStatus
	0, // 1: grpc.ValveService.GetStatus:input_type -> grpc.GetStatusRequest
	2, // 2: grpc.ValveService.OpenValve:input_type -> grpc.OpenValveRequest
	4, // 3: grpc.ValveService.CloseValve:input_type -> grpc.CloseValveRequest
	1, // 4: grpc.ValveService.GetStatus:output_type -> grpc.GetStatusResponse
	3, // 5: grpc.ValveService.OpenValve:output_type -> grpc.OpenValveResponse
	5, // 6: grpc.ValveService.CloseValve:output_type -> grpc.CloseValveResponse
	4, // [4:7] is the sub-list for method output_type
	1, // [1:4] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_valve_grpc_proto_init() }
func file_valve_grpc_proto_init() {
	if File_valve_grpc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_valve_grpc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_valve_grpc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_valve_grpc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenValveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_valve_grpc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenValveResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_valve_grpc_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloseValveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_valve_grpc_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloseValveResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_valve_grpc_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_valve_grpc_proto_goTypes,
		DependencyIndexes: file_valve_grpc_proto_depIdxs,
		MessageInfos:      file_valve_grpc_proto_msgTypes,
	}.Build()
	File_valve_grpc_proto = out.File
	file_valve_grpc_proto_rawDesc = nil
	file_valve_grpc_proto_goTypes = nil
	file_valve_grpc_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ValveServiceClient is the client API for ValveService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ValveServiceClient interface {
	GetStatus(ctx context.Context, in *GetStatusRequest, opts ...grpc.CallOption) (*GetStatusResponse, error)
	OpenValve(ctx context.Context, in *OpenValveRequest, opts ...grpc.CallOption) (*OpenValveResponse, error)
	CloseValve(ctx context.Context, in *CloseValveRequest, opts ...grpc.CallOption) (*CloseValveResponse, error)
}

type valveServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewValveServiceClient(cc grpc.ClientConnInterface) ValveServiceClient {
	return &valveServiceClient{cc}
}

func (c *valveServiceClient) GetStatus(ctx context.Context, in *GetStatusRequest, opts ...grpc.CallOption) (*GetStatusResponse, error) {
	out := new(GetStatusResponse)
	err := c.cc.Invoke(ctx, "/grpc.ValveService/GetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *valveServiceClient) OpenValve(ctx context.Context, in *OpenValveRequest, opts ...grpc.CallOption) (*OpenValveResponse, error) {
	out := new(OpenValveResponse)
	err := c.cc.Invoke(ctx, "/grpc.ValveService/OpenValve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *valveServiceClient) CloseValve(ctx context.Context, in *CloseValveRequest, opts ...grpc.CallOption) (*CloseValveResponse, error) {
	out := new(CloseValveResponse)
	err := c.cc.Invoke(ctx, "/grpc.ValveService/CloseValve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ValveServiceServer is the server API for ValveService service.
type ValveServiceServer interface {
	GetStatus(context.Context, *GetStatusRequest) (*GetStatusResponse, error)
	OpenValve(context.Context, *OpenValveRequest) (*OpenValveResponse, error)
	CloseValve(context.Context, *CloseValveRequest) (*CloseValveResponse, error)
}

// UnimplementedValveServiceServer can be embedded to have forward compatible implementations.
type UnimplementedValveServiceServer struct {
}

func (*UnimplementedValveServiceServer) GetStatus(context.Context, *GetStatusRequest) (*GetStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (*UnimplementedValveServiceServer) OpenValve(context.Context, *OpenValveRequest) (*OpenValveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenValve not implemented")
}
func (*UnimplementedValveServiceServer) CloseValve(context.Context, *CloseValveRequest) (*CloseValveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseValve not implemented")
}

func RegisterValveServiceServer(s *grpc.Server, srv ValveServiceServer) {
	s.RegisterService(&_ValveService_serviceDesc, srv)
}

func _ValveService_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ValveServiceServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.ValveService/GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ValveServiceServer).GetStatus(ctx, req.(*GetStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ValveService_OpenValve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenValveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ValveServiceServer).OpenValve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.ValveService/OpenValve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ValveServiceServer).OpenValve(ctx, req.(*OpenValveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ValveService_CloseValve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseValveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ValveServiceServer).CloseValve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.ValveService/CloseValve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ValveServiceServer).CloseValve(ctx, req.(*CloseValveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ValveService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.ValveService",
	HandlerType: (*ValveServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStatus",
			Handler:    _ValveService_GetStatus_Handler,
		},
		{
			MethodName: "OpenValve",
			Handler:    _ValveService_OpenValve_Handler,
		},
		{
			MethodName: "CloseValve",
			Handler:    _ValveService_CloseValve_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "valve.grpc.proto",
}
